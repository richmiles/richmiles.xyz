{
    "title": "SQL Server",
    "icon": "devicon-microsoftsqlserver-plain colored",
    "experience": 85,
    "overview": "Microsoft SQL Server has been a key part of my enterprise database toolkit, especially for integrating with other Microsoft technologies.",
    "usage": "I've used SQL Server extensively in Azure environments, taking advantage of its strong performance, security features, and integration with the broader Microsoft ecosystem.",
    "projects": ["Neowire Enterprise Platform", "Corporate Analytics System", "Business Intelligence Dashboard"],
    "insight": "<p>When working with SQL Server, I've found several unique advantages when compared to other database systems:</p><ul><li><strong>Integration with Azure:</strong> Seamless deployment with other Azure services like Azure Functions and Logic Apps</li><li><strong>Advanced Security:</strong> Row-level security and dynamic data masking for sensitive data</li><li><strong>Performance Analysis:</strong> Query Store and execution plans offer deep insights into query performance</li></ul><p>For Neowire's enterprise platform, I implemented a hybrid approach:</p><div class=\"code-example\">-- Example of partitioning for performance in SQL Server\nCREATE PARTITION FUNCTION [UserDataPartitionFunction](DATE) \nAS RANGE RIGHT FOR VALUES ('2020-01-01', '2021-01-01', '2022-01-01', '2023-01-01', '2024-01-01');\n\nCREATE PARTITION SCHEME [UserDataPartitionScheme] \nAS PARTITION [UserDataPartitionFunction] \nTO ([PRIMARY], [UserData2020], [UserData2021], [UserData2022], [UserData2023], [PRIMARY]);</div><p>This partitioning strategy allowed us to maintain high performance even as the dataset grew to hundreds of millions of records, with automatic archiving of older data to lower-cost storage tiers.</p>"
  }
  