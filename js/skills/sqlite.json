{
    "title": "SQLite",
    "icon": "devicon-sqlite-plain colored",
    "experience": 60,
    "overview": "SQLite provides a lightweight, serverless database solution ideal for quick and dirty data storage in embedded applications, mobile apps, desktop software, or even small-scale websites.",
    "usage": "I primarily use SQLite for reliable on-device storage without the overhead of a full client-server system. Most of my experience comes from working with pre-existing SQLite databases via EF Core, rather than spinning one up from scratch. This simplicity makes it a solid choice over ad-hoc solutions like Excel or CSV files, and in some cases, I even prefer it to SwiftData.",
    "projects": [
      "Edventure Trek",
      "Local Analytics Cache",
      "Offline-First Mobile App"
    ],
    "insight": "<p>SQLite's file-based architecture offers zero-configuration deployment and cross-platform compatibility, making it a go-to solution for minimalistic data storage. Although my work with SQLite has mostly involved pre-populated databases integrated via EF Core, it remains a compelling option for hosting simple websites or lightweight applications where a full-fledged database system would be overkill.</p><div class=\"code-example\">// Example of initializing a SQLite database using EF Core in C#\npublic class AppDbContext : DbContext {\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {\n        optionsBuilder.UseSqlite(\"Data Source=app.db\");\n    }\n\n    public DbSet<PlayerProgress> PlayerProgress { get; set; }\n}\n\n// Creating the database from scratch with migrations\nusing (var context = new AppDbContext()) {\n    context.Database.Migrate();\n}</div><p>This approach provides a robust and simple alternative to managing data through spreadsheets or CSV files, while still offering the power of a relational database.</p>"
  }
  