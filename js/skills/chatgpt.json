{
    "title": "Azure DevOps",
    "icon": "devicon-azure-plain colored",
    "experience": 82,
    "overview": "Azure DevOps provides a comprehensive set of tools for managing the entire application lifecycle that I've used extensively in enterprise environments.",
    "usage": "I use Azure DevOps for CI/CD pipelines, work item tracking, source control, and release management, particularly for projects that integrate with other Azure services.",
    "projects": ["Neowire", "Enterprise Data Platform", "Regulated Financial Application"],
    "insight": "<p>At Neowire, I built a full Azure CI/CD pipeline that ensured high reliability while meeting strict compliance requirements:</p><div class=\"code-example\"># azure-pipelines.yml\ntrigger:\n  branches:\n    include:\n    - main\n    - feature/*\n    - release/*\n\nstages:\n- stage: Build\n  jobs:\n  - job: BuildJob\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n    - script: |\n        echo Building application\n        dotnet build --configuration Release\n      displayName: 'Build Application'\n\n    - task: DotNetCoreCLI@2\n      inputs:\n        command: test\n        projects: '**/*Tests/*.csproj'\n        arguments: '--configuration Release --collect:\"XPlat Code Coverage\"'\n      displayName: 'Run Tests'\n\n    - task: PublishCodeCoverageResults@1\n      inputs:\n        codeCoverageTool: 'Cobertura'\n        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'\n      displayName: 'Publish Code Coverage'\n\n- stage: Deploy\n  dependsOn: Build\n  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))\n  jobs:\n  - deployment: DeployProd\n    environment: 'production'\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: AzureRmWebAppDeployment@4\n            inputs:\n              ConnectionType: 'AzureRM'\n              azureSubscription: '$(AzureSubscription)'\n              appType: 'webApp'\n              WebAppName: '$(WebAppName)-stage'\n          - script: |\n              echo Running smoke tests\n              ./run-smoke-tests.sh -e $(WebAppName)-stage.azurewebsites.net\n            displayName: 'Smoke Tests'\n          - task: AzureAppServiceManage@0\n            inputs:\n              azureSubscription: '$(AzureSubscription)'\n              Action: 'Swap Slots'\n              WebAppName: '$(WebAppName)'\n              SourceSlot: 'stage'\n              SwapWithProduction: true</div><p>This blue-green deployment approach allowed us to validate changes in a staging environment before directing traffic to the new version, virtually eliminating downtime and providing an immediate rollback option if issues were detected.</p>"
  }
