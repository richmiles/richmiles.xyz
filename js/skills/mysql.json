{
    "title": "MySQL",
    "icon": "devicon-mysql-plain colored",
    "experience": 40,
    "overview": "MySQL served as the database backend for Edventure Trek, but it quickly became apparent that it wasn't my preferred platform. On my development machine, it tended to consume all available memory, forcing me to frequently reinstall and redeploy the database.",
    "usage": "I used MySQL exclusively for Edventure Trek. With no external access to the database, I had to SSH into the server to run queries directly from the command line, often copying the output into an LLM for further analysis.",
    "projects": [
      "Edventure Trek"
    ],
    "insight": "<p>My experience with MySQL was a mixed bag. It marked my first encounter with JSON columns in a relational databaseâ€”one column held an ID and the other a JSON object. I struggled with querying this data until a generated column was introduced to simplify access. Despite its operational challenges, such as high memory usage and limited accessibility, I was still able to execute advanced SQL queries, like generating z-scores to rank users based on inventory and XP. Ultimately, while MySQL's SQL capabilities were comparable to other platforms, the overhead in managing it often outweighed its benefits.</p><div class=\"code-example\">-- Example of a generated column in MySQL for easier JSON querying\nCREATE TABLE user_data (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  raw_data JSON,\n  user_id INT,\n  generated_name VARCHAR(100) AS (JSON_UNQUOTE(JSON_EXTRACT(raw_data, '$.name'))) STORED\n);\n\n-- Query using the generated column\nSELECT id, generated_name FROM user_data\nWHERE generated_name = 'John Doe';</div>"
  }
  